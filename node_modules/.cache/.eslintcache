[{"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\index.js":"1","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\App.js":"2","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Footer.js":"3","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body.js":"4","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Header.js":"5","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body_Contents\\ToVisualise.js":"6","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body_Contents\\AboutSorting.js":"7","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body_Contents\\LastSec.js":"8","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Header Contents\\TakeAndSort.js":"9","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Sorting.js":"10","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Algorithms.js":"11","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Drawing.js":"12","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Main.js":"13"},{"size":280,"mtime":1676163328980,"results":"14","hashOfConfig":"15"},{"size":267,"mtime":1676163328964,"results":"16","hashOfConfig":"15"},{"size":740,"mtime":1676163328980,"results":"17","hashOfConfig":"15"},{"size":408,"mtime":1676163328964,"results":"18","hashOfConfig":"15"},{"size":1669,"mtime":1676163328980,"results":"19","hashOfConfig":"15"},{"size":448,"mtime":1676163328964,"results":"20","hashOfConfig":"15"},{"size":3075,"mtime":1676163328964,"results":"21","hashOfConfig":"15"},{"size":3715,"mtime":1676163328964,"results":"22","hashOfConfig":"15"},{"size":747,"mtime":1676163328980,"results":"23","hashOfConfig":"15"},{"size":2260,"mtime":1676163328964,"results":"24","hashOfConfig":"15"},{"size":4153,"mtime":1676163328948,"results":"25","hashOfConfig":"15"},{"size":986,"mtime":1676163328948,"results":"26","hashOfConfig":"15"},{"size":1162,"mtime":1676163328948,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hzy5k9",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\index.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\App.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Footer.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Header.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body_Contents\\ToVisualise.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body_Contents\\AboutSorting.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Body_Contents\\LastSec.js",["70","71","72"],[],"import React from \"react\";\r\nimport bubble from './textures/bubble.jpg';\r\nimport insertion from './textures/insertion.jpg';\r\nimport selection from './textures/selection.jpg';\r\n\r\nfunction LastSec(){\r\n\r\n\r\n    // const h1Style = {\r\n    //     fontFamily: ['Russo One', 'sans-serif'],\r\n    //     textAlign: 'center',\r\n    //     color: 'aliceblue'\r\n    // }\r\n\r\n    return (\r\n        <section className=\"s1\">\r\n            <div className=\"main-container\"><br />\r\n                <div data-aos=\"zoom-in\" data-aos-duration=\"1500\" className=\"post-wrapper\">\r\n                    <div className=\"post\">\r\n                        <img className=\"thumbnail\" src={bubble} />\r\n                        <div className=\"post-preview\">\r\n                            <h6 className=\"post-title\">Description</h6><br />\r\n                            <p className=\"post-intro\"> Bubble Sort is an iterative sorting algorithm that imitates the movement of bubbles in sparkling water..<br /><br />\r\n                                Complexity:\r\n                                <br />\r\n                                <b>Average Complexity:</b>&nbsp;&nbsp;&nbsp;O(n<sup>2</sup>)<br />\r\n                                <b>Best Case:</b>&nbsp;&nbsp;&nbsp;O(n)<br />\r\n                                <b>Worst Case:</b>&nbsp;&nbsp;&nbsp;O(n<sup>2</sup>)<br />\r\n                                <b>Space Complexity:&nbsp;&nbsp;&nbsp;</b>O(1)<br /><br /><br />\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className=\"post\">\r\n                        <img className=\"thumbnail\" src={selection} />\r\n                        <div className=\"post-preview\">\r\n                            <h6 className=\"post-title\"><b>Description</b></h6><br />\r\n                            <p className=\"post-intro\">The selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.                            <br /><br />\r\n                                Complexity:<br />\r\n                                <b>Average Complexity:</b>&nbsp;&nbsp;&nbsp;O(n<sup>2</sup>)<br />\r\n                                <b>Best Case:</b>&nbsp;&nbsp;&nbsp;O(n<sup>2</sup>)<br />\r\n                                <b>Worst Case:</b>&nbsp;&nbsp;&nbsp;O(n<sup>2</sup>)<br />\r\n                                <b>Space Complexity:&nbsp;&nbsp;&nbsp;</b>O(1)<br />    \r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className=\"post\">\r\n                        <img className=\"thumbnail\" src={insertion} />\r\n                        <div className=\"post-preview\">\r\n                            <h6 className=\"post-title\">Description</h6><br />\r\n                            <p className=\"post-intro\">The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.<br /><br />\r\n                                Complexity:<br />\r\n                                <b>Average Complexity:</b>&nbsp;&nbsp;&nbsp;O(n<sup>2</sup>)<br />\r\n                                <b>Best Case:</b>&nbsp;&nbsp;&nbsp;O(n)<br />\r\n                                <b>Worst Case:</b>&nbsp;&nbsp;&nbsp;O(n<sup>2</sup>)<br />\r\n                                <b>Space Complexity:&nbsp;&nbsp;&nbsp;</b>O(1)<br />\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n    \r\n    \r\n                </div>\r\n\r\n                {/* <h1 style={h1Style}>And, For No Reason!</h1> */}\r\n            </div>\r\n            \r\n        </section>\r\n    );\r\n}\r\n\r\nexport default LastSec;","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Header Contents\\TakeAndSort.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Sorting.js",["73","74","75","76","77","78"],[],"import * as sorts from './Algorithms';\r\nimport * as draws from './Drawing';\r\n\r\n// var arr = [34, 23];\r\nvar block = '<div class=\"block\"></div>';\r\nvar piles = '<div class=\"pile\"></div>';\r\n\r\n\r\nvar drawUnique = (i, j) => {\r\n    var q1 = document.getElementsByClassName(\"block\")[i]\r\n    var q2 = document.getElementsByClassName(\"block\")[j]\r\n\r\n    for (let k = 0; k < q1.childNodes.length; k++) {\r\n        q1.childNodes[k].className = \"un1\";\r\n    }\r\n    for (let k = 0; k < q2.childNodes.length; k++) {\r\n        q2.childNodes[k].className = \"un2\";\r\n    }\r\n}\r\n\r\nvar drawSame = (i, j) => {\r\n    var q1 = document.getElementsByClassName(\"block\")[i]\r\n    var q2 = document.getElementsByClassName(\"block\")[j]\r\n\r\n    for (let i = 0; i < q1.childNodes.length; i++) {\r\n        q1.childNodes[i].className = \"pile\";\r\n    }\r\n    for (let i = 0; i < q2.childNodes.length; i++) {\r\n        q2.childNodes[i].className = \"pile\";\r\n    }\r\n}\r\n\r\nvar swap = (i1, i2) => {\r\n    var q1 = document.getElementsByClassName(\"block\")[i1]\r\n    var q2 = document.getElementsByClassName(\"block\")[i2]\r\n\r\n    var temp = q1.innerHTML\r\n    q1.innerHTML = q2.innerHTML\r\n    q2.innerHTML = temp\r\n}\r\n\r\n\r\n\r\nconst validate = () => {\r\n    var nums = document.querySelector(\"#array\")\r\n    var alertMsg = \"\"\r\n    var num = nums.value.split(\" \").map(x => parseInt(x)); \r\n    for (let i = 0; i < num.length; i++) {\r\n        if(isNaN(num[i])){\r\n            alertMsg = \"Invalid Input\"\r\n            break\r\n        }\r\n    }\r\n    if(alertMsg!=\"\"){\r\n        alert(alertMsg)\r\n    }\r\n    else{\r\n        \r\n        simulate(num)\r\n    }\r\n}\r\n\r\nlet simulate = (num) => {\r\n    var q = document.querySelector('.numbers');\r\n    q.innerHTML = \"\";\r\n    // console.log(num);\r\n    \r\n    draws.draw(num)\r\n\r\n\r\n    \r\n    var x = document.querySelector(\"#sortingAlgo\")\r\n    let algo = x.value\r\n    console.log(algo);\r\n    if(algo==\"insertion\"){\r\n        sorts.insertionSort(num)\r\n        \r\n    }\r\n    else if(algo == \"selection\")\r\n        sorts.selectionSort(num)\r\n    else if(algo == \"bubble\")\r\n        sorts.bubbleSort(num)   \r\n    else if(algo == \"quick\")\r\n        sorts.quickSort(num)\r\n    else if(algo == \"merge\")\r\n        sorts.mergeSort(num)\r\n}\r\n\r\nexport {validate};\r\nexport {piles, block};\r\nexport {drawSame, drawUnique, swap};","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Algorithms.js",["79","80"],[],"import * as Sorts from './Sorting';\r\nimport * as Draws from './Drawing';\r\n// import {q, }\r\n\r\nasync function selectionSort(arr) {\r\n    let n = arr.length;\r\n        \r\n    for(let i = 0; i < n; i++) {\r\n        let min = i;\r\n        for(let j = i+1; j < n; j++){\r\n            if(arr[j] < arr[min]) {\r\n                min=j; \r\n            }\r\n         }\r\n         if (min != i) {\r\n            Sorts.drawUnique(i, min)\r\n            let tmp = arr[i]; \r\n            arr[i] = arr[min];\r\n            arr[min] = tmp;\r\n            await Draws.sleep(200)\r\n            Sorts.swap(i, min)\r\n            await Draws.sleep(100)\r\n            Sorts.drawSame(i, min)      \r\n        }\r\n    }\r\n}\r\n\r\nasync function bubbleSort(arr) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n        for (var j = 0; j < (arr.length - i - 1); j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n\r\n\r\n                Sorts.drawUnique(j, j+1)\r\n\r\n                var temp = arr[j]\r\n                arr[j] = arr[j + 1]\r\n                arr[j + 1] = temp\r\n\r\n                await Draws.sleep(200)\r\n                Sorts.swap(j, j+1)\r\n                await Draws.sleep(100)\r\n                Sorts.drawSame(j, j+1)  \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function insertionSort(arr) {\r\n    for (let i = 1; i < arr.length; i++) {\r\n        let j = i - 1;\r\n        let temp = arr[i];\r\n        while (j >= 0 && arr[j] > temp) {\r\n            Sorts.drawUnique(j, j+1)\r\n            arr[j + 1] = arr[j];\r\n            await Draws.sleep(200)\r\n            Sorts.swap(j, j+1)\r\n            await Draws.sleep(100)\r\n            Sorts.drawSame(j, j+1) \r\n            j--;\r\n        }\r\n        arr[j + 1] = temp;\r\n    }\r\n}\r\n\r\nasync function quickSort(arr) {\r\n    let l = 0\r\n    let h = arr.length-1;\r\n    let n = arr.length\r\n    let stack = new Array(h - l + 1);\r\n    stack.fill(0);\r\n    let top = -1;\r\n    stack[++top] = l;\r\n    stack[++top] = h;\r\n    while (top >= 0) {\r\n        h = stack[top--];\r\n        l = stack[top--];\r\n        let temp;\r\n        let pivot = arr[h];\r\n        let i = (l - 1);\r\n        for (let j = l; j <= h - 1; j++) {\r\n            if (arr[j] <= pivot) {\r\n                i++;\r\n\r\n                Sorts.drawUnique(i, j)\r\n\r\n\r\n                temp = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = temp;\r\n\r\n                await Draws.sleep(200)\r\n                Sorts.swap(i, j)\r\n                await Draws.sleep(100)\r\n                Sorts.drawSame(i, j)    \r\n            }\r\n        }\r\n\r\n        Sorts.drawUnique(i+1, h)\r\n\r\n        temp = arr[i + 1];\r\n        arr[i + 1] = arr[h];\r\n        arr[h] = temp;\r\n\r\n        await Draws.sleep(200)\r\n        Sorts.swap(i+1, h)\r\n        await Draws.sleep(100)\r\n        Sorts.drawSame(i+1, h)\r\n\r\n        let p = i + 1;;\r\n        if (p - 1 > l) {\r\n            stack[++top] = l;\r\n            stack[++top] = p - 1;\r\n        }\r\n        if (p + 1 < h) {\r\n            stack[++top] = p + 1;\r\n            stack[++top] = h;\r\n        }\r\n    }\r\n}\r\n\r\nasync function mergeSort(arr) {\r\n    let n = arr.length;\r\n    let temp = new Array(n);\r\n    for (let i = 0; i < n; i++) {\r\n        temp[i] = arr[i];\r\n    }\r\n    let l = 0;\r\n    let h = n - 1;\r\n    let m = Math.floor((l + h) / 2);\r\n    let i = 0;\r\n    let j = m + 1;\r\n    while (i <= m && j <= h) {\r\n        if (temp[i] <= temp[j]) {\r\n            Sorts.drawUnique(i, j)\r\n            arr[i] = temp[i];\r\n            i++;\r\n        } else {\r\n            Sorts.drawUnique(i, j)\r\n            arr[j] = temp[j];\r\n            j++;\r\n        }\r\n        await Draws.sleep(200)\r\n        Sorts.swap(i, j)\r\n        await Draws.sleep(100)\r\n        Sorts.drawSame(i, j)\r\n    }\r\n    while (i <= m) {\r\n        Sorts.drawUnique(i, j)\r\n        arr[j] = temp[i];\r\n        j++;\r\n        i++;\r\n        await Draws.sleep(200)\r\n        Sorts.swap(i, j)\r\n        await Draws.sleep(100)\r\n        Sorts.drawSame(i, j)\r\n    }\r\n    while (j <= h) {\r\n        Sorts.drawUnique(i, j)\r\n        arr[j] = temp[j];\r\n        j++;\r\n        await Draws.sleep(200)\r\n        Sorts.swap(i, j)\r\n        await Draws.sleep(100)\r\n        Sorts.drawSame(i, j)\r\n    }\r\n}\r\n\r\nexport {bubbleSort, insertionSort, selectionSort, mergeSort, quickSort};","C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Drawing.js",[],[],"C:\\Users\\91830\\OneDrive\\Desktop\\sort-and-see\\src\\Components\\Algos\\Main.js",[],[],{"ruleId":"81","severity":1,"message":"82","line":20,"column":25,"nodeType":"83","endLine":20,"endColumn":67},{"ruleId":"81","severity":1,"message":"82","line":35,"column":25,"nodeType":"83","endLine":35,"endColumn":70},{"ruleId":"81","severity":1,"message":"82","line":49,"column":25,"nodeType":"83","endLine":49,"endColumn":70},{"ruleId":"84","severity":1,"message":"85","line":54,"column":16,"nodeType":"86","messageId":"87","endLine":54,"endColumn":18},{"ruleId":"84","severity":1,"message":"88","line":75,"column":12,"nodeType":"86","messageId":"87","endLine":75,"endColumn":14},{"ruleId":"84","severity":1,"message":"88","line":79,"column":18,"nodeType":"86","messageId":"87","endLine":79,"endColumn":20},{"ruleId":"84","severity":1,"message":"88","line":81,"column":18,"nodeType":"86","messageId":"87","endLine":81,"endColumn":20},{"ruleId":"84","severity":1,"message":"88","line":83,"column":18,"nodeType":"86","messageId":"87","endLine":83,"endColumn":20},{"ruleId":"84","severity":1,"message":"88","line":85,"column":18,"nodeType":"86","messageId":"87","endLine":85,"endColumn":20},{"ruleId":"84","severity":1,"message":"85","line":15,"column":18,"nodeType":"86","messageId":"87","endLine":15,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":69,"column":9,"nodeType":"91","messageId":"92","endLine":69,"endColumn":10},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-unused-vars","'n' is assigned a value but never used.","Identifier","unusedVar"]